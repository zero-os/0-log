/*Package assert provides testing tools and is based on https://github.com/stretchr/testify/assert
This is done to prevent dependencies of external packages
*/
package assert

import (
	"bufio"
	"bytes"
	"fmt"
	"reflect"
	"runtime"
	"strings"
	"testing"
	"unicode"
	"unicode/utf8"
)

// True checks if values is true
func True(t *testing.T, val bool) bool {
	if !val {
		return Fail(t, "Expected True, got False")
	}
	return true
}

// False checks if value is false
func False(t *testing.T, val bool) bool {
	if val {
		return Fail(t, "Expected False, got True")

	}
	return true
}

// NoError checks if Error is nil
func NoError(t *testing.T, err error) bool {
	if err != nil {
		return Fail(t, "Unexpected error, got: %s", err)

	}

	return true
}

// Error checks if error is not nil
func Error(t *testing.T, err error) bool {
	if err == nil {
		return Fail(t, "Expected an error, got nil")
	}

	return true
}

// Equal checks if expected value equals the actual value
func Equal(t *testing.T, expected, actual interface{}) bool {
	if !objectsAreEqual(expected, actual) {
		return Fail(t, "Values were unexpectedly not equal\nExpected: %v\nActual: %v\n", expected, actual)
	}

	return true
}

// NotEqual checks if expected value does not equals the actual value
func NotEqual(t *testing.T, expected, actual interface{}) bool {
	if objectsAreEqual(expected, actual) {
		return Fail(t, "Values were unexpectedly equal\nExpected: %v\nActual: %v\n", expected, actual)
	}

	return true
}

// objectsAreEqual equal check logic
// source: github.com/stretchr/testify/assert/assertions.go
func objectsAreEqual(expected, actual interface{}) bool {
	if expected == nil || actual == nil {
		return expected == actual
	}

	if exp, ok := expected.([]byte); ok {
		act, ok := actual.([]byte)
		if !ok {
			return false
		} else if exp == nil || act == nil {
			return exp == nil && act == nil
		}
		return bytes.Equal(exp, act)
	}

	return reflect.DeepEqual(expected, actual)
}

type labeledContent struct {
	label   string
	content string
}

// Fail reports a failure through
// source: github.com/stretchr/testify/assert/assertions.go
func Fail(t *testing.T, failureMessage string, msgArgs ...interface{}) bool {
	content := []labeledContent{
		{"Error Trace", strings.Join(CallerInfo(), "\n\r\t\t\t")},
		{"Error", fmt.Sprintf(failureMessage, msgArgs...)},
	}

	t.Errorf("%s", "\r"+getWhitespaceString()+labeledOutput(content...))

	return false
}

/* CallerInfo is necessary because the assert functions use the testing object
internally, causing it to print the file:line of the assert method, rather than where
the problem actually occurred in calling code.*/

// CallerInfo returns an array of strings containing the file and line number
// of each stack frame leading from the current test to the assert call that
// failed.
// source: github.com/stretchr/testify/assert/assertions.go
func CallerInfo() []string {

	pc := uintptr(0)
	file := ""
	line := 0
	ok := false
	name := ""

	callers := []string{}
	for i := 0; ; i++ {
		pc, file, line, ok = runtime.Caller(i)
		if !ok {
			// The breaks below failed to terminate the loop, and we ran off the
			// end of the call stack.
			break
		}

		// This is a huge edge case, but it will panic if this is the case, see #180
		if file == "<autogenerated>" {
			break
		}

		f := runtime.FuncForPC(pc)
		if f == nil {
			break
		}
		name = f.Name()

		// testing.tRunner is the standard library function that calls
		// tests. Subtests are called directly by tRunner, without going through
		// the Test/Benchmark/Example function that contains the t.Run calls, so
		// with subtests we should break when we hit tRunner, without adding it
		// to the list of callers.
		if name == "testing.tRunner" {
			break
		}

		parts := strings.Split(file, "/")
		file = parts[len(parts)-1]
		if len(parts) > 1 {
			dir := parts[len(parts)-2]
			if (dir != "assert" && dir != "mock" && dir != "require") || file == "mock_test.go" {
				callers = append(callers, fmt.Sprintf("%s:%d", file, line))
			}
		}

		// Drop the package
		segments := strings.Split(name, ".")
		name = segments[len(segments)-1]
		if isTest(name, "Test") ||
			isTest(name, "Benchmark") ||
			isTest(name, "Example") {
			break
		}
	}

	return callers
}

// Stolen from the `go test` tool.
// isTest tells whether name looks like a test (or benchmark, according to prefix).
// It is a Test (say) if there is a character after Test that is not a lower-case letter.
// We don't want TesticularCancer.
// source: github.com/stretchr/testify/assert/assertions.go
func isTest(name, prefix string) bool {
	if !strings.HasPrefix(name, prefix) {
		return false
	}
	if len(name) == len(prefix) { // "Test" is ok
		return true
	}
	rune, _ := utf8.DecodeRuneInString(name[len(prefix):])
	return !unicode.IsLower(rune)
}

// getWhitespaceString returns a string that is long enough to overwrite the default
// output from the go testing framework.
// source: github.com/stretchr/testify/assert/assertions.go
func getWhitespaceString() string {

	_, file, line, ok := runtime.Caller(1)
	if !ok {
		return ""
	}
	parts := strings.Split(file, "/")
	file = parts[len(parts)-1]

	return strings.Repeat(" ", len(fmt.Sprintf("%s:%d:        ", file, line)))

}

// labeledOutput returns a string consisting of the provided labeledContent. Each labeled output is appended in the following manner:
//
//   \r\t{{label}}:{{align_spaces}}\t{{content}}\n
//
// The initial carriage return is required to undo/erase any padding added by testing.T.Errorf. The "\t{{label}}:" is for the label.
// If a label is shorter than the longest label provided, padding spaces are added to make all the labels match in length. Once this
// alignment is achieved, "\t{{content}}\n" is added for the output.
//
// If the content of the labeledOutput contains line breaks, the subsequent lines are aligned so that they start at the same location as the first line.
// source: github.com/stretchr/testify/assert/assertions.go
func labeledOutput(content ...labeledContent) string {
	longestLabel := 0
	for _, v := range content {
		if len(v.label) > longestLabel {
			longestLabel = len(v.label)
		}
	}
	var output string
	for _, v := range content {
		output += "\r\t" + v.label + ":" + strings.Repeat(" ", longestLabel-len(v.label)) + "\t" + indentMessageLines(v.content, longestLabel) + "\n"
	}
	return output
}

// Aligns the provided message so that all lines after the first line start at the same location as the first line.
// Assumes that the first line starts at the correct location (after carriage return, tab, label, spacer and tab).
// The longestLabelLen parameter specifies the length of the longest label in the output (required becaues this is the
// basis on which the alignment occurs).
// source: github.com/stretchr/testify/assert/assertions.go
func indentMessageLines(message string, longestLabelLen int) string {
	outBuf := new(bytes.Buffer)

	for i, scanner := 0, bufio.NewScanner(strings.NewReader(message)); scanner.Scan(); i++ {
		// no need to align first line because it starts at the correct location (after the label)
		if i != 0 {
			// append alignLen+1 spaces to align with "{{longestLabel}}:" before adding tab
			outBuf.WriteString("\n\r\t" + strings.Repeat(" ", longestLabelLen+1) + "\t")
		}
		outBuf.WriteString(scanner.Text())
	}

	return outBuf.String()
}
